"use strict";
/**
 *  This creates an importable version of the multicall bytecode and
 *  ABI for use in otther parts of the library.
 *
 *  Build command:   npm run build-solc
 *  Output:          src.ts/_contract.ts
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const ethers_1 = require("ethers");
function stripErrors(lines) {
    const output = [];
    for (const line of lines.split(/\n/g)) {
        if (line.startsWith(">>>")) {
            continue;
        }
        output.push(line);
    }
    return output.join("\n");
}
const _result = fs_1.default.readFileSync("./misc/output/result.json").toString();
const result = JSON.parse(stripErrors(_result));
const abi = result.contracts["multicall.sol"].Multicall.abi;
const iface = new ethers_1.Interface(abi);
const bin = (0, ethers_1.getBytes)("0x" + result.contracts["multicall.sol"].Multicall.evm.bytecode.object);
const output = [];
output.push(`/* Do NOT modify this file; it is generated by _build.ts. */`);
output.push(`/* Any changes will be clobbered on the next build.  */`);
output.push(`import { decodeBase64, hexlify } from "ethers";`);
output.push(`export const bin = hexlify(decodeBase64("${(0, ethers_1.encodeBase64)(bin)}"));`);
output.push(`export const abi = [`);
for (let fragment of iface.format()) {
    if (fragment.match(/constructor/)) {
        fragment = fragment.replace(/ nonpayable/, "");
    }
    output.push(`  ${JSON.stringify(fragment)},`);
}
output.push(`];`);
fs_1.default.writeFileSync("./src.ts/_contract.ts", output.join("\n"));
//# sourceMappingURL=_build.js.map